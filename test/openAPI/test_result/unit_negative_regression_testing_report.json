{
    "created": 1677926683.8478146,
    "duration": 3.75712251663208,
    "exitcode": 1,
    "root": "/test/step_defs",
    "environment": {
        "Python": "3.8.15",
        "Platform": "Linux-5.15.0-56-generic-x86_64-with-glibc2.2.5",
        "Packages": {
            "pytest": "7.2.0",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "metadata": "2.0.4",
            "json-report": "1.5.0",
            "anyio": "3.6.2",
            "bdd": "6.1.1"
        }
    },
    "summary": {
        "passed": 98,
        "failed": 26,
        "total": 124,
        "collected": 212,
        "deselected": 88
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_affiliate_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_subscriber.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_cancel_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_createresources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deaffiliate_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_subscriber.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_alert_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_entity_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_entity_list.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_find_free_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_list_session_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_session_alert_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_session_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_subscribers_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_subscribers_list.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getresourcelist.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getresourcesdetails.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getsessiondetails.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_request_session_status.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_send_session_alerts.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_sessioncreate.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_session_status.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_updateresources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_updatesession.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_affiliate_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_allocate_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4523353535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4523353535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_allocate_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_allocate_subscriber.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_cancel_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_create_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-6724453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_create_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_create_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_create_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_createresources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-405]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_deaffiliate_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_deallocate_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_deallocate_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_deallocate_subscriber.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_findfreeresourcesapi.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_smoke_type_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids_smoke_type_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_alert_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resources-health-icu,bed-Mahe]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_entity_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-mahe-9980555504-sree@gmail.com-http://alert.com-Mangalore-hspital]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_entity_list.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-admin-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Lawyer-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_find_free_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_list_session_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_list_session_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_smoke_test[healthngo1-healthworker-he1]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_session_alert_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_session_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_subscribers_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_get_subscribers_list.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscribers_list_for_scheduler_api_smoke_test[healthngo1-healthworker-he1]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscribers_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-he1-bed-urgent-he1-test]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_getresourcelist.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-404]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-405]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_getresourcesdetails.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_getsessiondetails.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_request_session_status.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_send_session_alerts.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535-4524453535-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_sessioncreate.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_update_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_update_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_update_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_update_session_status.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-source_BB_Id-4524453535-success]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_update_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_updateresources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        },
        {
            "nodeid": "test_updatesession.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                    "type": "Function",
                    "lineno": 216
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-hsop-400",
                "test_affiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00035908445715904236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10507301706820726,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022543035447597504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-education-403",
                "test_affiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00027392804622650146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010692666284739971,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019772350788116455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-academics-404",
                "test_affiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024422816932201385,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014118258841335773,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020927470177412033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-400",
                "test_allocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026934780180454254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011579763144254684,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002170167863368988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-403",
                "test_allocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024320930242538452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012128983624279499,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021237600594758987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-404",
                "test_allocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002485448494553566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010889144614338875,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002222275361418724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-400",
                "test_allocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00029271095991134644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011268838308751583,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019703339785337448,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-403",
                "test_allocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026279594749212265,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029555929824709892,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020448118448257446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-404",
                "test_allocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024215131998062134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012227270752191544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002041161060333252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-400",
                "test_allocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00027502793818712234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014958041720092297,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020444579422473907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-403",
                "test_allocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00031462032347917557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013476411812007427,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020289607346057892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-404",
                "test_allocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026481878012418747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01187670323997736,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020872894674539566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-400",
                "test_cancel_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00029730144888162613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014839968644082546,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002039847895503044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_cancel_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002623731270432472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012802230194211006,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020689517259597778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_cancel_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024268217384815216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011815173551440239,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020803697407245636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-400",
                "test_create_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024953577667474747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013417759910225868,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021975114941596985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-403",
                "test_create_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000247330404818058,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013441632501780987,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020821858197450638,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-404",
                "test_create_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003087446093559265,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014830047264695168,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002186167985200882,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-400",
                "test_create_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002488577738404274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011625136248767376,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002175401896238327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-403",
                "test_create_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024734996259212494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016651200130581856,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021607521921396255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-404",
                "test_create_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002515232190489769,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01737819891422987,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023746676743030548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-400",
                "test_create_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002837367355823517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013122845441102982,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025700684636831284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-403",
                "test_create_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00029637012630701065,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01756824366748333,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024344585835933685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-404",
                "test_create_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00028585363179445267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014900272712111473,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021647848188877106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400",
                "test_create_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002617454156279564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012688957154750824,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022590532898902893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403",
                "test_create_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002661142498254776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047092161141335964,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029525719583034515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-404",
                "test_create_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003156038001179695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012847232632339,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023570749908685684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400",
                "test_createresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00031279306858778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013205833733081818,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022519659250974655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403",
                "test_createresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003272769972681999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019614769145846367,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000249314121901989,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-405]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-405]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-405",
                "test_createresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003126012161374092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0136100510135293,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002316972240805626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-hsop-400",
                "test_deaffiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003166366368532181,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015812695026397705,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002461457625031471,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-education-403",
                "test_deaffiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002898741513490677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01096592377871275,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002196338027715683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-academics-404",
                "test_deaffiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00031681545078754425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010339003056287766,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021651573479175568,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-400",
                "test_deallocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003088768571615219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014065884985029697,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021292176097631454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-403",
                "test_deallocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00029752030968666077,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0106613514944911,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021801237016916275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-404",
                "test_deallocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002723541110754013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010918457061052322,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002145078033208847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-400",
                "test_deallocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002848329022526741,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009203342720866203,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021634623408317566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-403",
                "test_deallocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002872450277209282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018395735882222652,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003782752901315689,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-404",
                "test_deallocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0004915222525596619,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012034004554152489,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025654491037130356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-400",
                "test_deallocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00039221160113811493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009576506912708282,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002425815910100937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-403",
                "test_deallocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003608856350183487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0094194570556283,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023105647414922714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-404",
                "test_deallocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00028742942959070206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009445116855204105,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003241235390305519,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003809593617916107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011492818593978882,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026500411331653595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00035039056092500687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011273141019046307,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022433139383792877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002455245703458786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013005966320633888,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022324081510305405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026152096688747406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011999031528830528,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002204757183790207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourceslotsapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002602832391858101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0189253780990839,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023225508630275726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourceslotsapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024500954896211624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016999877989292145,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002497360110282898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourceslotsapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025469250977039337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014787137508392334,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025748834013938904,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "negativeregression",
                "unit",
                "pytestmark",
                "__scenario__",
                "healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourceslotsapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000257137231528759,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015130928717553616,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025154463946819305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-myresource-400",
                "test_get_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025765877217054367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014404620975255966,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025791581720113754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_get_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00030571967363357544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011975407600402832,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002279849722981453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_get_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000275392085313797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014603836461901665,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002191457897424698,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-myresource-400",
                "test_get_entity_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026295147836208344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013246030546724796,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002182377502322197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_get_entity_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025897473096847534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014699017629027367,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022050179541110992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_get_entity_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000273839570581913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014320149086415768,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020929798483848572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400",
                "test_get_entity_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00027396809309720993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008402607403695583,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_entity_list.py",
                        "lineno": 48,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8a8160>\nrequest = <FixtureRequest for <Function test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]>>\nkwargs = {'email_id': 'sree@gmail.com', 'entityId': '4524453535', 'entitycategory': 'hospital', 'entityname': 'sreepathy', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_entity_list.py:48: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002196105197072029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403",
                "test_get_entity_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000343826599419117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011645515449345112,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_entity_list.py",
                        "lineno": 48,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8a8160>\nrequest = <FixtureRequest for <Function test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]>>\nkwargs = {'email_id': 'sree@gmail.com', 'entityId': '4524453535', 'entitycategory': 'hospital', 'entityname': 'sreepathy', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_entity_list.py:48: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00020890403538942337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404",
                "test_get_entity_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002658367156982422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012430095113813877,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_entity_list.py",
                        "lineno": 48,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8a8160>\nrequest = <FixtureRequest for <Function test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]>>\nkwargs = {'email_id': 'sree@gmail.com', 'entityId': '4524453535', 'entitycategory': 'hospital', 'entityname': 'sreepathy', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_entity_list.py:48: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00020285695791244507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025846902281045914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010172145441174507,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021000485867261887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024798884987831116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011950827203691006,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021875277161598206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025568995624780655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010052736848592758,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020106788724660873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023621227592229843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010897877626121044,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002109389752149582,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026460736989974976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009964969009160995,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023979879915714264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002634115517139435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011103319004178047,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021068844944238663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00028718821704387665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029069602489471436,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025353673845529556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002655899152159691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01048713643103838,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021176785230636597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400",
                "test_get_list_session_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002485997974872589,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0093955984339118,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_resources.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad879040>\nrequest = <FixtureRequest for <Function test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_resources.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021823495626449585,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403",
                "test_get_list_session_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00028608739376068115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009087705053389072,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_resources.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad879040>\nrequest = <FixtureRequest for <Function test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_resources.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021857582032680511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404",
                "test_get_list_session_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00033509358763694763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008486145175993443,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_resources.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad879040>\nrequest = <FixtureRequest for <Function test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_resources.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00020144041627645493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400",
                "test_get_list_session_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003138948231935501,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00901854783296585,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_subscribers.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8898b0>\nrequest = <FixtureRequest for <Function test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_test...healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_subscribers.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002164691686630249,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403",
                "test_get_list_session_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002679554745554924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015583548694849014,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_subscribers.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8898b0>\nrequest = <FixtureRequest for <Function test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_test...healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_subscribers.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002421122044324875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404",
                "test_get_list_session_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003050258383154869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009512590244412422,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_subscribers.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad8898b0>\nrequest = <FixtureRequest for <Function test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_test...healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]>>\nkwargs = {'alertMode': 'urgent', 'alert_url': 'http://alert.com', 'email_id': 'sree@gmail.com', 'entityId': 'he1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_subscribers.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00024752411991357803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400",
                "test_get_session_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003478657454252243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012446052394807339,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_session_alert_details.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad823310>\nrequest = <FixtureRequest for <Function test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400]>>\nkwargs = {'alertMessage': 'resourcecrunch', 'alertcategory': 'health', 'entityId': '4524453535', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_session_alert_details.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002185152843594551,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403",
                "test_get_session_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003422144800424576,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015602248720824718,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_session_alert_details.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad823310>\nrequest = <FixtureRequest for <Function test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403]>>\nkwargs = {'alertMessage': 'resourcecrunch', 'alertcategory': 'health', 'entityId': '4524453535', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_session_alert_details.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002923347055912018,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404",
                "test_get_session_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034884922206401825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010613239370286465,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_session_alert_details.py",
                        "lineno": 49,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad823310>\nrequest = <FixtureRequest for <Function test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404]>>\nkwargs = {'alertMessage': 'resourcecrunch', 'alertcategory': 'health', 'entityId': '4524453535', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_session_alert_details.py:49: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00022332649677991867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-400",
                "test_get_session_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003577526658773422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01812298409640789,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025835447013378143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_get_session_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00033189915120601654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014647508040070534,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002616662532091141,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_get_session_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00033115874975919724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01317658368498087,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026815664023160934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-myresource-400",
                "test_get_subscribers_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034008175134658813,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015074681490659714,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000265573151409626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_get_subscribers_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00033950526267290115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011533043347299099,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002573532983660698,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_get_subscribers_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00036775413900613785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013694330118596554,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002627158537507057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400",
                "test_get_subscribers_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034272298216819763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009687388315796852,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_subscribers_list.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad7e5790>\nrequest = <FixtureRequest for <Function test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'bangalore', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_subscribers_list.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021538231521844864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403",
                "test_get_subscribers_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00030742958188056946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008511487394571304,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_subscribers_list.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad7e5790>\nrequest = <FixtureRequest for <Function test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'mysore', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_subscribers_list.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00022892560809850693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404",
                "test_get_subscribers_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000303095206618309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015961087308824062,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_subscribers_list.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad7e5790>\nrequest = <FixtureRequest for <Function test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he2', 'location': 'mysore', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_subscribers_list.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00019753165543079376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405",
                "test_get_subscribers_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026785023510456085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00828671082854271,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_subscribers_list.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad7e5790>\nrequest = <FixtureRequest for <Function test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he2', 'location': 'bangalore', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_subscribers_list.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002176249399781227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-333-4524453535-bed-urgent-he1-400",
                "test_getresourcelist.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00031805410981178284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012929764576256275,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_getresourcelist.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad801160>\nrequest = <FixtureRequest for <Function test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-400]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_getresourcelist.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002644248306751251,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-333-4524453535-bed-urgent-he1-403",
                "test_getresourcelist.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003604358062148094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014564336277544498,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_getresourcelist.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad801160>\nrequest = <FixtureRequest for <Function test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-403]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_getresourcelist.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002128351479768753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-333-4524453535-bed-urgent-he1-404",
                "test_getresourcelist.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003185225650668144,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015038150362670422,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_getresourcelist.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad801160>\nrequest = <FixtureRequest for <Function test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-404]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_getresourcelist.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021700095385313034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-405]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-405]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-333-4524453535-bed-urgent-he1-405",
                "test_getresourcelist.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00032326485961675644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010765495710074902,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_getresourcelist.py",
                        "lineno": 47,
                        "message": "in neg_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7fecaeb2fdb0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7fecaf1527c0>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function neg_get_request at 0x7fecad801160>\nrequest = <FixtureRequest for <Function test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-405]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_getresourcelist.py:47: in neg_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021814648061990738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-myresource-400",
                "test_getresourcesdetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000286320224404335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024986675940454006,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023083295673131943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_getresourcesdetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000364033505320549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01068879198282957,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002716062590479851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_getresourcesdetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0007889559492468834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01079697534441948,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002400670200586319,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-400",
                "test_getsessiondetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000333636999130249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013657193630933762,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.00020132865756750107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-403",
                "test_getsessiondetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00038130022585392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014369646087288857,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.0001889532431960106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-404",
                "test_getsessiondetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003358861431479454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014231400564312935,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 30 in scenario \"Get Session Details for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/getsessiondetails.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.000191553495824337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-target_BB_Id-sucess-400",
                "test_request_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034014787524938583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010995413176715374,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024320371448993683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-target_BB_Id-sucess-403",
                "test_request_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003146817907691002,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011444080621004105,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002665286883711815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-target_BB_Id-sucess-404",
                "test_request_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034007150679826736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012689829804003239,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002452004700899124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-4524453535-400",
                "test_send_session_alerts.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034038908779621124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012444618158042431,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024966243654489517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-4524453535-403",
                "test_send_session_alerts.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034486036747694016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016969510354101658,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002538654953241348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-4524453535-404",
                "test_send_session_alerts.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003367224708199501,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015076872892677784,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002549104392528534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935",
                "test_sessioncreate.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003384798765182495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021378666162490845,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004207221791148186,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-400",
                "test_update_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00046920962631702423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017298630438745022,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024250242859125137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-403",
                "test_update_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00035795196890830994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01787699293345213,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025103427469730377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-404",
                "test_update_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00035749655216932297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013003464788198471,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030222442001104355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400",
                "test_update_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003957124426960945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009761413559317589,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024388451129198074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403",
                "test_update_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003525819629430771,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010522915981709957,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023933406919240952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404",
                "test_update_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003509474918246269,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031093823723495007,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002524023875594139,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400",
                "test_update_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003380943089723587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011518333107233047,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024083256721496582,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403",
                "test_update_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00034118350595235825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01636937540024519,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004985351115465164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404",
                "test_update_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000726046971976757,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023230276070535183,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002008425071835518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-source_BB_Id-4524453535-success-400",
                "test_update_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002562291920185089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010066352784633636,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019355770200490952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-source_BB_Id-4524453535-success-403",
                "test_update_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002419445663690567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009657969698309898,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021685194224119186,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-source_BB_Id-4524453535-success-404",
                "test_update_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002814633771777153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009802582673728466,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002398137003183365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400",
                "test_update_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00032024551182985306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011968867853283882,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021836813539266586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403",
                "test_update_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000309256836771965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009802465327084064,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000280049629509449,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404",
                "test_update_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002723652869462967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013369999825954437,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021856557577848434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400",
                "test_updateresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024539045989513397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012698781676590443,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020437221974134445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403",
                "test_updateresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002452181652188301,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014477497898042202,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019660312682390213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404",
                "test_updateresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023484602570533752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011003995314240456,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020367559045553207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400",
                "test_updatesession.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00029032398015260696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018214806914329529,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name='U... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(fea...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-...5-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.00018473900854587555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403",
                "test_updatesession.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025355443358421326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0065536946058273315,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name='U... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(fea...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-...5-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.0001927269622683525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                "usefixtures",
                "parametrize",
                "unit",
                "Negativeregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404",
                "test_updatesession.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002710968255996704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017973221838474274,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name='U... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(fea...ndent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'Negativeregression'})\nrequest = <FixtureRequest for <Function test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-...5-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the invalid inputs for the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 28 in scenario \"Update a session for Scheduler API Unit and Regression Negative Testing\" in the feature \"/test/features/updatesession.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.00019852444529533386,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.happyregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.Negativeregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.negativeregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        }
    ]
}