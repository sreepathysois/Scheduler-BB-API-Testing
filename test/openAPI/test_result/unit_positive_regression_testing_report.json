{
    "created": 1677926664.3411593,
    "duration": 1.5347447395324707,
    "exitcode": 1,
    "root": "/test/step_defs",
    "environment": {
        "Python": "3.8.15",
        "Platform": "Linux-5.15.0-56-generic-x86_64-with-glibc2.2.5",
        "Packages": {
            "pytest": "7.2.0",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "metadata": "2.0.4",
            "json-report": "1.5.0",
            "anyio": "3.6.2",
            "bdd": "6.1.1"
        }
    },
    "summary": {
        "passed": 40,
        "failed": 8,
        "total": 48,
        "collected": 212,
        "deselected": 164
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_affiliate_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_allocate_subscriber.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_cancel_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_create_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_createresources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deaffiliate_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_deallocate_subscriber.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_alert_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_entity_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_entity_list.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_find_free_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_list_session_resources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_session_alert_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_session_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_subscribers_details.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_get_subscribers_list.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getresourcelist.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getresourcesdetails.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_getsessiondetails.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_request_session_status.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_send_session_alerts.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_sessioncreate.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_alert.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_entity.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_session.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_session_status.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_update_subscribers.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_updateresources.py",
                    "type": "Module"
                },
                {
                    "nodeid": "test_updatesession.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_affiliate_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_allocate_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4523353535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4523353535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_allocate_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_allocate_subscriber.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_cancel_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_create_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-6724453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_create_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4423455-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_create_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_create_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_createresources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535-405]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_deaffiliate_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-hsop-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-education-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-academics-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_deallocate_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_deallocate_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_deallocate_subscriber.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_smoke_test[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-test-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_findfreeresourcesapi.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_smoke_type_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids_with_negative_inputs[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_findfreeresourceslotsapi.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids_smoke_type_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_findfreeresourceslotsapi.py::test_find_free_resources_slots_for_given_resource_ids[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_alert_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resources-health-icu,bed-Mahe]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_alert_details.py::test_get_alert_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_entity_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-mahe-9980555504-sree@gmail.com-http://alert.com-Mangalore-hspital]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_details.py::test_get_entity_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_entity_list.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-admin-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Lawyer-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo2-healthworker-Nurse-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for_scheduler_api_unit_and_regression_negative_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_find_free_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-lawyer-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-402]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp1-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-Hosp3-true-ambulance-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_list_session_resources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_list_session_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_smoke_test[healthngo1-healthworker-he1]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_session_alert_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_session_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_session_details.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_subscribers_details.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_get_subscribers_list.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscribers_list_for_scheduler_api_smoke_test[healthngo1-healthworker-he1]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscribers_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-he1-bed-urgent-he1-test]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he1-bed-urgent-bangalore-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535h-he1-bed-urgent-mysore-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-mysore-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_get_subscribers_list.py::test_get_subscriberss_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-he2-bed-urgent-bangalore-405]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_getresourcelist.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcelist.py::test_get_resources_list_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-333-4524453535-bed-urgent-he1-405]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_getresourcesdetails.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-myresource-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_getsessiondetails.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_getsessiondetails.py::test_get_session_details_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_request_session_status.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_request_session_status.py::test_request_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_send_session_alerts.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_smoke_test[healthngo1-healthworker-4524453535-4524453535-4524453535]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-4524453535]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-4524453535-4524453535-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_sessioncreate.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-admin-consultation-2023-02-04-08:44:44.683Z-2023-03-04-09:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_update_alert.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_update_entity.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_update_session.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_update_session_status.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-source_BB_Id-4524453535-success]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-source_BB_Id-4524453535-success-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_update_subscribers.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_updateresources.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        },
        {
            "nodeid": "test_updatesession.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_smoke_test",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                    "type": "Function",
                    "lineno": 216
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-400]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-403]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                },
                {
                    "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_negative_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-404]",
                    "type": "Function",
                    "lineno": 216,
                    "deselected": true
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_affiliate_entity.py::test_affiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_affiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-hosp",
                "test_affiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000407596118748188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1010521175339818,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002261567860841751,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_alert.py::test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4523353535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4523353535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4523353535",
                "test_allocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024652108550071716,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012661337852478027,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019662082195281982,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_resources.py::test_allocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535",
                "test_allocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023878365755081177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013307254761457443,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019715819507837296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_allocate_subscriber.py::test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_allocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535",
                "test_allocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000239555723965168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01729818992316723,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020735058933496475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_cancel_session.py::test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_cancel_a_session_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535",
                "test_cancel_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024588126689195633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01220877468585968,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020067114382982254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_alert.py::test_create_a_new_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-6724453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-6724453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-health-resource threshold-he2-bed,icu-mahe-6724453535",
                "test_create_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023743975907564163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016338491812348366,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002093203365802765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_entity.py::test_create_a_new_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-practo-9980555504-sree@gmail.com-http://alert.com-Bangalore-hsopital-4524453535",
                "test_create_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00031801778823137283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013814439065754414,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002084486186504364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_session.py::test_create_a_new_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935",
                "test_create_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023633521050214767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016818365082144737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020905118435621262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_create_subscribers.py::test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_a_new_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535",
                "test_create_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002382444217801094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013775866478681564,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020774547010660172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_createresources.py::test_create_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-4524453535",
                "test_createresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000242491252720356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015978600829839706,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020682252943515778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deaffiliate_entity.py::test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deaffiliate_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535-hosp]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535-hosp",
                "test_deaffiliate_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002425573766231537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01215312723070383,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019703153520822525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_alert.py::test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_an_alert_to_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535",
                "test_deallocate_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024364609271287918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015941405668854713,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020107440650463104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_resources.py::test_deallocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_resource_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535",
                "test_deallocate_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000252782367169857,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01481640338897705,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019938498735427856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_deallocate_subscriber.py::test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_deallocate_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-4524453535",
                "test_deallocate_subscriber.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003156624734401703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009414887055754662,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022395886480808258,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "practo-admin-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023857969790697098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012136812321841717,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020396243780851364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "practo-admin-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00032092630863189697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012551330961287022,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020185578614473343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[practo-admin-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "practo-admin-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023567862808704376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011931073851883411,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002795904874801636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_findfreeresourcesapi.py::test_find_free_resources_slots_for_given_resource_ids[practo-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_find_free_resources_slots_for_given_resource_ids[practo-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "practo-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_findfreeresourcesapi.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002996055409312248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012084047310054302,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023588724434375763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_alert_details.py::test_get_alert_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resources-health-icu,bed-Mahe]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_alert_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resources-health-icu,bed-Mahe]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-resources-health-icu,bed-Mahe",
                "test_get_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00028434954583644867,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012454429641366005,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002245018258690834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_details.py::test_get_entity_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-mahe-9980555504-sree@gmail.com-http://alert.com-Mangalore-hspital]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_entity_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-mahe-9980555504-sree@gmail.com-http://alert.com-Mangalore-hspital]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-mahe-9980555504-sree@gmail.com-http://alert.com-Mangalore-hspital",
                "test_get_entity_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00027830246835947037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011916179209947586,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029158685356378555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_entity_list.py::test_get_list_of_entity_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_entity_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe",
                "test_get_entity_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.000316535122692585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008341544307768345,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_entity_list.py",
                        "lineno": 38,
                        "message": "in unit_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function unit_get_request at 0x7f3f6019ff70>\nrequest = <FixtureRequest for <Function test_get_list_of_entity_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital-4524453535-mahe]>>\nkwargs = {'email_id': 'sree@gmail.com', 'entityId': '4524453535', 'entitycategory': 'hospital', 'entityname': 'sreepathy', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_entity_list.py:38: in unit_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002045975998044014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-admin-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-admin-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-admin-Doctor-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002587931230664253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010287336073815823,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021055899560451508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Lawyer-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Lawyer-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo2-healthworker-Lawyer-false-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023153703659772873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012296626344323158,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020422693341970444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo3-healthworker-ICU-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002309884876012802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011233871802687645,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002082372084259987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resource_slots.py::test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resource_slots_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo4-healthworker-Lab-true-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resource_slots.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002351459115743637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017543899826705456,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022197142243385315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-Hosp1-true-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026230234652757645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012920425273478031,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021452177315950394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo2-healthworker-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo2-healthworker-Hosp1-false-doctor-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002568168565630913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01496222335845232,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021697022020816803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo3-healthworker-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo3-healthworker-Hosp2-true-bed-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002813497558236122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014293790794909,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003276662901043892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_find_free_resources.py::test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_getfind_free_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo4-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo4-healthworker-Hosp3-true-icu-2023-02-04T08:44:44.683Z-2023-02-04T08:44:44.683Z-2018-02-15T00:00:00Z-2018-02-15T00:00:00Z",
                "test_get_find_free_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0003693811595439911,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016784564591944218,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021041277796030045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_resources.py::test_get_list_of_session_resources_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_resources_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test",
                "test_get_list_session_resources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024379044771194458,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010424923151731491,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_resources.py",
                        "lineno": 27,
                        "message": "in smoke_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function smoke_get_request at 0x7f3f600fa9d0>\nrequest = <FixtureRequest for <Function test_get_list_of_session_resources_for__scheduler_api_unit_and_regression_happy_testing[...ngo1-healthworker-he1-4524453535-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test-test]>>\nkwargs = {'healthngo1': 'healthngo1', 'healthworker': 'healthworker', 'sessionId': 'he1\" for resource with id \"4524453535\"  \"be...ree\" \"99805555504\" \"sree@gmail.com\" for \"http://alert.com\" with alert mode \"urgent\"  for a entity \"he1\" in \"Bangalore'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_resources.py:27: in smoke_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00021234434098005295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_list_session_subscribers.py::test_get_list_of_session_subscribers_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_subscribers_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test",
                "test_get_list_session_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026481691747903824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014308864250779152,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_list_session_subscribers.py",
                        "lineno": 29,
                        "message": "in smoke_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function smoke_get_request at 0x7f3f60115430>\nrequest = <FixtureRequest for <Function test_get_list_of_session_subscribers_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-he1-test-bed-sree-99805555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore-test]>>\nkwargs = {'requestor_Entity': 'healthngo1', 'requestor_Role': 'healthworker', 'sessionId': 'he1\" for subscriber with id \"test\" ...ree\" \"99805555504\" \"sree@gmail.com\" for \"http://alert.com\" with alert mode \"urgent\"  for a entity \"he1\" in \"Bangalore'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_list_session_subscribers.py:29: in smoke_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0001921253278851509,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_alert_details.py::test_get_list_of_session_alerts_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_list_of_session_alerts_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger",
                "test_get_session_alert_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002842238172888756,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009755533188581467,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_session_alert_details.py",
                        "lineno": 39,
                        "message": "in unit_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function unit_get_request at 0x7f3f600b0160>\nrequest = <FixtureRequest for <Function test_get_list_of_session_alerts_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-resourcecrunch-health-bed,icu-mahe-45678-mytrigger]>>\nkwargs = {'alertMessage': 'resourcecrunch', 'alertcategory': 'health', 'entityId': '4524453535', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_session_alert_details.py:39: in unit_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00020325090736150742,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_session_details.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records",
                "test_get_session_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026138313114643097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018917784094810486,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021474342793226242,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_details.py::test_get_subscriber_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_subscriber_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore",
                "test_get_subscribers_details.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002549542114138603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013509056530892849,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021588709205389023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_get_subscribers_list.py::test_get_subscribers_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-he1-bed-urgent-he1-test]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_subscribers_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-he1-bed-urgent-he1-test]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-test-he1-bed-urgent-he1-test",
                "test_get_subscribers_list.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025432370603084564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009203691966831684,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_get_subscribers_list.py",
                        "lineno": 37,
                        "message": "in unit_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function unit_get_request at 0x7f3f600725e0>\nrequest = <FixtureRequest for <Function test_get_subscribers_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-test-he1-bed-urgent-he1-test]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_get_subscribers_list.py:37: in unit_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.00022116582840681076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcelist.py::test_get_resources_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_resources_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test",
                "test_getresourcelist.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00032686255872249603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011179721914231777,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                    "lineno": 975,
                    "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py",
                        "lineno": 907,
                        "message": ""
                    },
                    {
                        "path": "test_getresourcelist.py",
                        "lineno": 37,
                        "message": "in unit_get_request"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/requests/models.py",
                        "lineno": 975,
                        "message": "JSONDecodeError"
                    }
                ],
                "longrepr": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'Error while serving the content: invalid media type', cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/usr/local/lib/python3.8/json/__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', _w = <built-in method match of re.Pattern object at 0x7f3f613bb6f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/usr/local/lib/python3.8/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f3f619de790>, s = 'Error while serving the content: invalid media type', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function unit_get_request at 0x7f3f6007cf70>\nrequest = <FixtureRequest for <Function test_get_resources_list_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-344-4524453535-bed-urgent-he1-test-test]>>\nkwargs = {'alertMode': 'urgent', 'entityId': 'he1', 'location': 'he1', 'requestor_Entity': 'healthngo1', ...}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py:907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_getresourcelist.py:37: in unit_get_request\n    status_code = response.json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:975: JSONDecodeError"
            },
            "teardown": {
                "duration": 0.0002114754170179367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getresourcesdetails.py::test_get_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_get_resources_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore",
                "test_getresourcesdetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002828221768140793,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015187982469797134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002233823761343956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_getsessiondetails.py::test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sree-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records",
                "test_getsessiondetails.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00027635227888822556,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014184899628162384,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 18 in scenario \"Get Session Details for  Scheduler API Unit and Regression Happy Testing\" in the feature \"/test/features/getsessiondetails.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Get Session Details for Scheduler API Smoke Test', ScenarioTemplate(...1, indent=0, keyword='And', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'happyregression'})\nrequest = <FixtureRequest for <Function test_get_session_details_for__scheduler_api_unit_and_regression_happy_testing[healthngo1...-ep1-itu-83295-38291-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-test-he1-10-1-usd-no refund-get records]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the requestor entity is \"healthngo1\" with role as \"healthworker\" for session_id \"4524453535\"\". Line 18 in scenario \"Get Session Details for  Scheduler API Unit and Regression Happy Testing\" in the feature \"/test/features/getsessiondetails.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.00020188279449939728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_request_session_status.py::test_request_session_status_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_request_session_status_for__scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-target_BB_Id-sucess]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-target_BB_Id-sucess",
                "test_request_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002810796722769737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012789282947778702,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021686125546693802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_send_session_alerts.py::test_send_session_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-4524453535]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_send_session_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-4524453535-4524453535]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-4524453535-4524453535",
                "test_send_session_alerts.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025454722344875336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016076301224529743,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023914780467748642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_sessioncreate.py::test_create_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_create_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records-4524458935",
                "test_sessioncreate.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026968494057655334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012011460959911346,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002055540680885315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_alert.py::test_update_an_existing_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_existing_alert_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-health-resource threshold-he2-bed,icu-mahe",
                "test_update_alert.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002368539571762085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013492617756128311,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021399091929197311,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_entity.py::test_update_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_an_entity_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-sreepathy-9980555504-sree@gmail.com-http://entity.com-Bangalore-hospital",
                "test_update_entity.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00023838132619857788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014114483259618282,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019782502204179764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records",
                "test_update_session.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00025356654077768326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01590248290449381,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002117101103067398,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_session_status.py::test_update_a_session_status_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-source_BB_Id-4524453535-success]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_session_status_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-source_BB_Id-4524453535-success]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-source_BB_Id-4524453535-success",
                "test_update_session_status.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002530524507164955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012501555494964123,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021532364189624786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_update_subscribers.py::test_update_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_a_subscriber_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore",
                "test_update_subscribers.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.0002504456788301468,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014217406511306763,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002008434385061264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updateresources.py::test_update_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
            "lineno": 216,
            "outcome": "passed",
            "keywords": [
                "test_update_resources_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-bed-sreepathy-9980555504-sree@gmail.com-http://alert.com-urgent-he1-Bangalore",
                "test_updateresources.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00024053361266851425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011421281844377518,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019929558038711548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_updatesession.py::test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
            "lineno": 216,
            "outcome": "failed",
            "keywords": [
                "test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]",
                "usefixtures",
                "parametrize",
                "unit",
                "happyregression",
                "pytestmark",
                "__scenario__",
                "healthngo1-healthworker-4524453535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records",
                "test_updatesession.py",
                "step_defs"
            ],
            "setup": {
                "duration": 0.00026288721710443497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002307121641933918,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                    "lineno": 192,
                    "message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 17 in scenario \"Update a session for Scheduler API Unit and Regression Happy Testing\" in the feature \"/test/features/updatesession.feature\""
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py",
                        "lineno": 192,
                        "message": "StepDefinitionNotFoundError"
                    }
                ],
                "longrepr": "feature = Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(feature=..., name='U... API', tags=set(), background=None, line_number=1, description='Gherkin feature files for GovStack Scheduler services')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Update a session for Scheduler API Smoke Test', ScenarioTemplate(fea..., indent=0, keyword='Then', failed=False, scenario=None, background=None, lines=[])], tags={'unit', 'happyregression'})\nrequest = <FixtureRequest for <Function test_update_a_session_for_scheduler_api_unit_and_regression_happy_testing[healthngo1-hea...53535-consultation-active-2023-02-04-08:44:44.683Z-2023-02-04-08:44:44.683Z-pysio-he1-10-1-usd-no refund-get records]>>\n\n    def _execute_scenario(feature: Feature, scenario: Scenario, request: FixtureRequest) -> None:\n        \"\"\"Execute the scenario.\n    \n        :param feature: Feature.\n        :param scenario: Scenario.\n        :param request: request.\n        :param encoding: Encoding.\n        \"\"\"\n        __tracebackhide__ = True\n        request.config.hook.pytest_bdd_before_scenario(request=request, feature=feature, scenario=scenario)\n    \n        try:\n            for step in scenario.steps:\n                step_func_context = get_step_function(request=request, step=step)\n                if step_func_context is None:\n                    exc = exceptions.StepDefinitionNotFoundError(\n                        f\"Step definition is not found: {step}. \"\n                        f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                    )\n                    request.config.hook.pytest_bdd_step_func_lookup_error(\n                        request=request, feature=feature, scenario=scenario, step=step, exception=exc\n                    )\n>                   raise exc\nE                   pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Given \"the requestor entity is \"healthngo1\" with role as \"healthworker\" to update a session with its ID \"4524453535\" for a given date range from \"2023-02-04\" to \"2023-02-04\" with time interval from \"08:44:44.683Z\" to \"08:44:44.683Z\" for an \"pysio\" with \"consultation\" with further inputs like \"he1\" with \"10\" and \"1\" in \"usd\" for a specific \"no refund\" with following \"get records\"\". Line 17 in scenario \"Update a session for Scheduler API Unit and Regression Happy Testing\" in the feature \"/test/features/updatesession.feature\"\n\n/usr/local/lib/python3.8/site-packages/pytest_bdd/scenario.py:192: StepDefinitionNotFoundError"
            },
            "teardown": {
                "duration": 0.00019459892064332962,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.happyregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.Negativeregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        },
        {
            "message": "Unknown pytest.mark.negativeregression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/site-packages/pytest_bdd/plugin.py",
            "lineno": 127
        }
    ]
}